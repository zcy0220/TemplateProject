/**
 * UIPrefab转代码
 */

using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace Editor.UIPrefabCodeGenerate
{
    public class UICodeGenerate
    {
        /// <summary>
        /// 代码导出路径
        /// </summary>
        public static string CODE_GENERATE_EXPORT_PATH = "Scripts/GameMain/Views/UI/AutoGenerated";
        /// <summary>
        /// 
        /// </summary>
        [MenuItem("Assets/UIPrefabCodeGenerate/CodeGenerate")]
        public static void Generate()
        {
            var sb = new StringBuilder();
            sb.Append(LineText("/**"));
            sb.Append(LineText(" * AutoGenerated Code By UICodeGenerate"));
            sb.Append(LineText(" */\n"));
            sb.Append(LineText("using UnityEngine.UI;\n"));
            sb.Append(LineText("namespace GameMain.Views.UI"));
            sb.Append(LineText("{"));
            var prefab = Selection.activeObject as GameObject;
            sb.Append(LineText($"public class {prefab.name}Base : UIBase", 1));
            sb.Append(LineText("{", 1));
            var childs = prefab.transform.GetComponentsInChildren<Transform>(true);
            for (int i = 0; i < childs.Length; i++)
            {
                var componentLineText = GetComponentLineText(childs[i]);
                if (!string.IsNullOrEmpty(componentLineText))
                {
                    sb.Append(componentLineText);
                }
            }
            sb.Append(LineText("}", 1));
            sb.Append(LineText("}"));
            var dirPath = Path.Combine(Application.dataPath, CODE_GENERATE_EXPORT_PATH);
            if (!Directory.Exists(dirPath)) Directory.CreateDirectory(dirPath);
            File.WriteAllText(Path.Combine(dirPath, $"{prefab.name}.cs"), sb.ToString());
            AssetDatabase.Refresh();
        }

        public static string GetComponentLineText(Transform transform)
        {
            var name = transform.name;
            if (name.StartsWith("<") && name.Contains(">"))
            {
                var index = name.IndexOf(">");
                var componentType = name.Substring(1, index - 1);
                var componentName = $"_{componentType.ToLower()}{name.Substring(index + 1)}";
                return LineText($"protected {componentType} {componentName};", 2);
            }
            return "";
        }

        /// <summary>
        /// 获得每一行的字符串
        /// </summary>
        public static string LineText(string text, int tabCount = 0)
        {
            string result = "";
            for (int i = 1; i <= tabCount; i++)
            {
                result = "\t" + result;
            }
            return result + text + "\n";
        }
    }
}